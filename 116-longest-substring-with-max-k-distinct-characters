public static Integer longestDistinctSubstring(String str, Integer k){ 
    //solution here

    if(k == 0){
        return 0;
    }

    Map<String, Integer> frequencyMap = new Map<String, Integer>();
    Integer left = 0;
    Integer maxLength = 0;

    for(Integer i = 0; i < str.length(); i++){
        String charRight = str.subString(i, i+1);
        
        if(frequencyMap.containsKey(charRight)){
            frequencyMap.put(charRight, frequencyMap.get(charRight) + 1);
        }else{
            frequencyMap.put(charRight, 1);
        }

        while(frequencyMap.size() > k){
    
            String charLeft = str.subString(left, left+1);
            frequencyMap.get(charLeft)--;
            if(frequencyMap.get(charLeft) == 0){
                frequencyMap.remove(charLeft);
            }
            left++;
        }
    }

    maxLength = Math.max(maxLength, right - left + 1);
    return maxLength;
}