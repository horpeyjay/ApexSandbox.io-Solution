public static Integer longestDistinctSubstring(String str, Integer k){ 
    //solution here

    if(k == 0){
        return 0;
    }

    Map<String, Integer> frequencyMap = new Map<String, Integer>();
    Integer left = 0;
    Integer maxLength = 0;

    for(Integer i = 0; i < str.length(); i++){
        String charRight = str[i];

        if(frequencyMap.containsKey(charRight)){
            frequencyMap.put(charRight, frequencyMap.get(charRight) + 1);
        }else{
            frequencyMap.put(charRight, 1);
        }

        while(frequencyMap.size() > k){
            String charLeft = str[left];
            frequencyMap.get(charLeft)--;
            if(frequencyMap.get(charLeft) == 0){
                frequencyMap.remove(charLeft);
            }
            left++;
        }
    }

    maxLength = Math.max(maxLength, right - left + 1);
    return maxLength;
}

/*
function largestSubstringWithKDistinct(str, k):

    // Expand the window by moving the right pointer
    for right from 0 to length of str - 1:

        // Shrink the window from the left if map size exceeds k
        while size of frequencyMap > k:
            charLeft = str[left]
            
            // Decrease frequency of the leftmost character
            decrement frequencyMap[charLeft]
            
            // Remove character from map if its count is 0
            if frequencyMap[charLeft] is 0:
                remove charLeft from frequencyMap

            // Move the left pointer to shrink the window
            increment left

        // Update maxLength to be the larger of the current maxLength or the current window size
        maxLength = max(maxLength, right - left + 1)

    return maxLength

*/