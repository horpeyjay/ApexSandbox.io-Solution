public List<String> commonChars(List<String> strs){
    //solution here
    // Check for null or empty input list
    if (strs == null || strs.isEmpty()) {
        return new List<String>();
    }
    
    // Initialize minFreqMap using the first string's characters
    Map<String, Integer> minFreqMap = new Map<String, Integer>();
    String firstString = strs[0];
    
    // Populate minFreqMap with the frequency of each character in the first string
    for (Integer i = 0; i < firstString.length(); i++) {
        String currentChar = firstString.substring(i, i + 1);
        if (minFreqMap.containsKey(currentChar)) {
            minFreqMap.put(currentChar, minFreqMap.get(currentChar) + 1);
        } else {
            minFreqMap.put(currentChar, 1);
        }
    }
    
    // Iterate through the remaining strings in strs
    for (Integer j = 1; j < strs.size(); j++) {
        String s = strs[j];
        Map<String, Integer> charFreqMap = new Map<String, Integer>();

        // Count frequencies of characters in the current string
        for (Integer k = 0; k < s.length(); k++) {
            String currentChar = s.substring(k, k + 1);
            if (charFreqMap.containsKey(currentChar)) {
                charFreqMap.put(currentChar, charFreqMap.get(currentChar) + 1);
            } else {
                charFreqMap.put(currentChar, 1);
            }
        }

        // Update minFreqMap to retain the minimum frequency for each character
        for (String charKey : minFreqMap.keySet()) {
            if (charFreqMap.containsKey(charKey)) {
                minFreqMap.put(charKey, Math.min(minFreqMap.get(charKey), charFreqMap.get(charKey)));
            } else {
                minFreqMap.put(charKey, 0); // If character is missing, set to 0
            }
        }
    }
    
    // Construct the final list based on minFreqMap
    List<String> finalList = new List<String>();
    for (String charKey : minFreqMap.keySet()) {
        Integer count = minFreqMap.get(charKey);
        for (Integer l = 0; l < count; l++) {
            finalList.add(charKey);
        }
    }

    return finalList;
}