public List<String> commonChars(List<String> strs){
    //solution here
    if(strs.isEmpty() || strs == null){
        return new List<String>();
    }
    //get the first string in the list
    List<Integer> charForFirstString = strs[0].getChars();
    String firstString = strs[0];
    Map<String, Integer> minFreqMap = new Map<String, Integer>();
    Map<String, Integer> charFreqMap = new Map<String, Integer>();
    

    //store it in a map.
    Map<String, Integer> letterToAscii = new Map<String, Integer>();
    if(firstString.length() == charForFirstString.size()){
        for(Integer i = 0; i < firstString.length(); i++){
            String currentChar = firstString.subString(i, i+1);

            if(!minFreqMap.containsKey(currentChar)){
                minFreqMap.put(currentChar, 1);
            }else{
                minFreqMap.put(currentChar, minFreqMap.get(currentChar)+1);
            }
        }

        for(Integer j = 1; j < strs.size(); j++){
            String s = strs[j];

            for(Integer k = 0; k < s.length(); k++){
                String currentChar = s.subString(k, k + 1);

                if(charFreqMap.containsKey(currentChar)){
                    charFreqMap.put(currentChar, charFreqMap.get(currentChar) + 1);
                }else{
                    charFreqMap.put(currentChar, 1);
                }
            }
        }
    }
    Integer size = strs.size() - 1;
    system.debug('List size = ' + size);
    List<String> finalList = new List<String>();
    for(String s : minFreqMap.keySet()){
        if(charFreqMap.containsKey(s)){
            if(minFreqMap.get(s) * size == charFreqMap.get(s)){
                if(minFreqMap.get(s) >= 1){
                    for(Integer l = 0; l < minFreqMap.get(s); l++){
                        finalList.add(s);
                    }
                }       
                system.debug('The list contains => ' + finalList);
            }
        }
    }  
    return finalList;  

}